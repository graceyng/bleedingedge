x = rep(1:3, 4)
x <- sample(x = rep(1:3, 4), 12)
y = rep(x)
replace(y, y==1, 5)
replace(y, y==2, 4)
replace(y, y==3, 6)
replace(y, y==4, 1)
replace(y, y==5, 2)
replace(y, y==6, 3)
replace(y, y==1, 6)
replace(y, y==2, 4)
replace(y, y==3, 5)
replace(y, y==4, 1)
replace(y, y==1, 6)
replace(y, y==2, 4)
y = replace(y, y==1, 6)
y = replace(y, y==2, 4)
y = replace(y, y==3, 5)
y = replace(y, y==4, 1)
y = replace(y, y==5, 2)
y = replace(y, y==6, 3)
adj.rand.index(x, y)
install.packages("pdfCluster")
library(pdfCluster)
adj.rand.index(x, y)
y <- c(3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1)
adj.rand.index(x, y)
rootdir = "~/maca"
tissue_of_interest = "Marrow"
library(Seurat)
library(dplyr)
library(Matrix)
library(pdfCluster)
plate_metadata <- read.csv(file = paste0(rootdir, "/metadata/MACA_Metadata.csv"), sep=",", header = TRUE)
#rootdir = "~/maca"
rootdir = "~/Senior_Year/CS_229/Project/maca"
tissue_of_interest = "Marrow"
library(Seurat)
library(dplyr)
library(Matrix)
library(pdfCluster)
plate_metadata <- read.csv(file = paste0(rootdir, "/metadata/MACA_Metadata.csv"), sep=",", header = TRUE)
colnames(plate_metadata)[1] <- "plate.barcode"
count_files = list.files(paste0(rootdir, "/data/plates"), pattern = "*counts.tab",recursive = FALSE)
downloaded_plates = lapply(count_files, function(x) strsplit(x,"[./]")[[1]][1])
plate_metadata = plate_metadata[plate_metadata$plate.barcode %in% downloaded_plates,]
save_dir = paste0(rootdir, '/save')
dir.create(save_dir)
tissue_plates = filter(plate_metadata, tissue == tissue_of_interest & mouse.age == 3)[,c('plate.barcode','tissue','subtissue','mouse.sex')]
#Load the gene names and set the metadata columns by opening the first file
raw.data = read.csv(file = paste0(rootdir,"/data/plates/", tissue_plates$plate.barcode[1], '.counts.tab') ,sep='\t')
raw.data = data.frame(row.names = rownames(raw.data))
meta.data = plate_metadata[1,][-1,]
for(i in 1:nrow(tissue_plates)){
new.data = read.csv(file = paste0(rootdir,"/data/plates/", tissue_plates$plate.barcode[i], '.counts.tab') ,sep='\t')
new.metadata = data.frame(row.names = colnames(new.data))
new.metadata['plate.barcode'] = tissue_plates$plate.barcode[i]
raw.data = cbind(raw.data, new.data)
meta.data = rbind(meta.data, new.metadata)
}
rnames = row.names(meta.data)
meta.data <- merge(meta.data, plate_metadata, sort = F)
row.names(meta.data) <- rnames
# Find ERCC's, compute the percent ERCC, and drop them from the raw data.
erccs <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = TRUE)
percent.ercc <- Matrix::colSums(raw.data[erccs, ])/Matrix::colSums(raw.data)
ercc.index <- grep(pattern = "^ERCC-", x = rownames(x = raw.data), value = FALSE)
raw.data <- raw.data[-ercc.index,]
# Create the Seurat object with all the data
tiss <- CreateSeuratObject(raw.data = raw.data, project = tissue_of_interest,
min.cells = 5, min.genes = 5)
tiss <- AddMetaData(object = tiss, meta.data)
tiss <- AddMetaData(object = tiss, percent.ercc, col.name = "percent.ercc")
# Change default name for sums of counts from nUMI to nReads
colnames(tiss@meta.data)[colnames(tiss@meta.data) == 'nUMI'] <- 'nReads'
# Create metadata columns for annotations and subannotations
tiss@meta.data[,'annotation'] <- NA
tiss@meta.data[,'subannotation'] <- NA
ribo.genes <- grep(pattern = "^Rp[sl][[:digit:]]", x = rownames(x = tiss@data), value = TRUE)
percent.ribo <- Matrix::colSums(tiss@raw.data[ribo.genes, ])/Matrix::colSums(tiss@raw.data)
tiss <- AddMetaData(object = tiss, metadata = percent.ribo, col.name = "percent.ribo")
GenePlot(object = tiss, gene1 = "nReads", gene2 = "nGene", use.raw=T)
tiss <- FilterCells(object = tiss, subset.names = c("nGene", "nReads"),
low.thresholds = c(500, 50000), high.thresholds = c(25000, 2000000))
tiss <- NormalizeData(object = tiss)
tiss <- ScaleData(object = tiss, vars.to.regress = c("nReads", "percent.ribo","Rn45s"))
tiss <- FindVariableGenes(object = tiss, do.plot = TRUE, x.high.cutoff = Inf, y.cutoff = 0.5)
tiss <- RunPCA(object = tiss, do.print = FALSE)
tiss <- ProjectPCA(object = tiss, do.print = FALSE)
PCHeatmap(object = tiss, pc.use = 1:3, cells.use = 500, do.balanced = TRUE, label.columns = FALSE, num.genes = 8)
PCElbowPlot(object = tiss)
# Set number of principal components.
n.pcs = 10
# Set resolution
res.used <- 0.5
tiss <- FindClusters(object = tiss, reduction.type = "pca", dims.use = 1:n.pcs,
resolution = res.used, print.output = 0, save.SNN = TRUE)
# If cells are too spread out, you can raise the perplexity. If you have few cells, try a lower perplexity (but never less than 10).
tiss <- RunTSNE(object = tiss, dims.use = 1:n.pcs, seed.use = 10, perplexity=30)
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = tiss, do.label = T)
cluster <- subtiss.ident
subtiss@ident
subtiss
tiss
tiss@ident
slot(tiss, ident)
fetch.data(tiss,c("ident"))
cluster = FetchData(tiss,c("ident"))
cluster
gold_standard <- cluster
adj.rand.index(cluster, gold_standard)
names(cluster@ident)
names(tiss@ident)
values(tiss@ident)
getSlots(tiss@ident)
typeof(tiss@ident)
new_vec <- c(tiss@ident)
new_vec
new_vec <- unname(c(tiss@ident))
new_vec
vec2 <- new_vec
adj.rand.index(new_vec, vec2)
new_vec <- unname(tiss@ident)
new_vec
